
@{
    ViewBag.Title = "SwertAlert";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>SwertAlert 2 </h2>

<button class="btn btn-success" onclick="Added()">  Başarılı </button>
<button class="btn btn-warning" onclick="Updated()">  Uyarı </button>
<button class="btn btn-danger" onclick="Deleted()">  Hata </button>

<br />
<hr />
<button class="btn btn-info" onclick="AreYouSure()">  Emin misin ! </button>

<button class="btn btn-info" onclick="Loaded()">  Yükleme Ekranı </button>

<button class="btn btn-info" onclick="ImgSweetAlert()">  Resimli Sweet Alert </button>

<br />
<hr />

<button class="btn btn-dark"  onclick="Cat()"> Backgrand </button>

<button class="btn btn-dark" onclick="GitHubProfilFind()"> Github Profil Bul </button>


<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>

    function Added() {

        Swal.fire({
            position: 'top-end',
            icon: 'success',
            title: 'Başarılı',
            showConfirmButton: false,
            timer: 2000
        })

    }

    function Updated() {

        Swal.fire({
            position: 'top-end',
            icon: 'warning',
            title: 'Uyarı',
            showConfirmButton: false,
            timer: 2000
        })

    }

    function Deleted() {

        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
            footer: '<a href="">Why do I have this issue?</a>'
        })

    }

    function AreYouSure() {

        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire(
                    'Deleted!',
                    'Your file has been deleted.',
                    'success'
                )
            }
        })

    }

    function Cat() {

        Swal.fire({
            title: 'Custom width, padding, color, background.',
            width: 600,
            padding: '3em',
            color: '#716add',
            background: '#fff url(/images/trees.png)',
            backdrop: `
             rgba(0,0,123,0.4)
             url("/images/nyan-cat.gif")
             left top
             no-repeat
  `
        })

    }

    function Loaded() {

        let timerInterval
        Swal.fire({
            title: 'Auto close alert!',
            html: 'I will close in <b></b> milliseconds.',
            timer: 2000,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
                const b = Swal.getHtmlContainer().querySelector('b')
                timerInterval = setInterval(() => {
                    b.textContent = Swal.getTimerLeft()
                }, 100)
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
        }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                console.log('I was closed by the timer')
            }
        })

    }

    function GitHubProfilFind() {

        Swal.fire({
            title: 'Submit your Github username',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Look up',
            showLoaderOnConfirm: true,
            preConfirm: (login) => {
                return fetch(`//api.github.com/users/${login}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(response.statusText)
                        }
                        return response.json()
                    })
                    .catch(error => {
                        Swal.showValidationMessage(
                            `Request failed: ${error}`
                        )
                    })
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: `${result.value.login}'s avatar`,
                    imageUrl: result.value.avatar_url
                })
            }
        })

    }

    function ImgSweetAlert() {

        Swal.fire({
            title: 'Sweet!',
            text: 'Modal with a custom image.',
            imageUrl: 'https://unsplash.it/400/200',
            imageWidth: 400,
            imageHeight: 200,
            imageAlt: 'Custom image',
        })

    }

</script>